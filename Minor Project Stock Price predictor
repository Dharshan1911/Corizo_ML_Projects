import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt


def preprocess_data(stock_data):
    stock_data.dropna(inplace=True)
    return stock_data


def train_model(X_train, y_train):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    return model


def evaluate_model(model, X_test, y_test):
    predictions = model.predict(X_test)
    mse = mean_squared_error(y_test, predictions)
    return mse


def plot_predictions(y_test, predictions):
    plt.figure(figsize=(10, 6))
    plt.plot(y_test.index, y_test, label='Actual Price')
    plt.plot(y_test.index, predictions, label='Predicted Price')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.title('Stock Price Prediction')
    plt.legend()
    plt.show()


def main():
    file_path = r"C:\Users\Admin\OneDrive\Documents\Minor Project Data set (Stock Price Prediction).xlsx"
    stock_data = pd.read_excel(file_path)
    stock_data = preprocess_data(stock_data)
    X = stock_data[['Open', 'High', 'Low', 'Volume']]
    y = stock_data['Close']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = train_model(X_train, y_train)
    mse = evaluate_model(model, X_test, y_test)
    print("Mean Squared Error:", mse)
    predictions = model.predict(X_test)
    plot_predictions(y_test, predictions)


if __name__ == "__main__":
    main()
